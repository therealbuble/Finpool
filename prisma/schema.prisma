generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  clerkUserId   String         @unique
  email         String         @unique
  name          String?
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  budgets       Budget?
  transactions  Transaction[]
  conversations Conversation[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  isDefault    Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  accountId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  category          String
  lastProcessed     DateTime?
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id            String    @id @default(uuid())
  amount        Decimal
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastAlertSent DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}

model Goal {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  target_amount Decimal   @db.Decimal(10, 2)
  saved_amount  Decimal?  @default(0) @db.Decimal(10, 2)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@map("goals")
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  messages  Message[] // This will cascade delete
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String       // "user" or "bot"
  content        String       @db.Text
  timestamp      DateTime     @default(now())
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}